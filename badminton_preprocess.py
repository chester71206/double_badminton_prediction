# -*- coding: utf-8 -*-
"""badminton_preprocess.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aCofCnOXfhEHYnCYuQquWQH9_mT6tslq
"""

import pandas as pd

# 讀取六個CSV檔案
set1 = pd.read_csv('set1.csv')
set2 = pd.read_csv('set2.csv')
set3 = pd.read_csv('set3.csv')
set4 = pd.read_csv('set4.csv')
set5 = pd.read_csv('set5.csv')
set6 = pd.read_csv('set6.csv')



import numpy as np

pd.set_option('display.max_rows', None)  # 顯示所有行
pd.set_option('display.max_columns', None)  # 顯示所有列
pd.set_option('display.width', None)  # 設置顯示寬度

def preprocess(homography_matrix, set1):
    hit_x_y = np.empty((set1.shape[0], 3))
    return_x_y = np.empty((set1.shape[0], 3))
    player_A_x_y = np.empty((set1.shape[0], 3))
    player_B_x_y = np.empty((set1.shape[0], 3))
    player_C_x_y = np.empty((set1.shape[0], 3))
    player_D_x_y = np.empty((set1.shape[0], 3))
    for i in range(set1.shape[0]):
        x = set1.iloc[i]['hit_x']
        y = set1.iloc[i]['hit_y']
        hit_x_y[i] = [x, y, 1]

        x = set1.iloc[i]['return_x']
        y = set1.iloc[i]['return_y']
        return_x_y[i] = [x, y, 1]

        x = set1.iloc[i]['player_A_x']
        y = set1.iloc[i]['player_A_y']
        player_A_x_y[i] = [x, y, 1]

        x = set1.iloc[i]['player_B_x']
        y = set1.iloc[i]['player_B_y']
        player_B_x_y[i] = [x, y, 1]

        x = set1.iloc[i]['player_C_x']
        y = set1.iloc[i]['player_C_y']
        player_C_x_y[i] = [x, y, 1]

        x = set1.iloc[i]['player_D_x']
        y = set1.iloc[i]['player_D_y']
        player_D_x_y[i] = [x, y, 1]

    process_hit_x_y = np.empty((set1.shape[0], 3))
    process_return_x_y = np.empty((set1.shape[0], 3))
    process_player_A_x_y = np.empty((set1.shape[0], 3))
    process_player_B_x_y = np.empty((set1.shape[0], 3))
    process_player_C_x_y = np.empty((set1.shape[0], 3))
    process_player_D_x_y = np.empty((set1.shape[0], 3))
    for i in range(hit_x_y.shape[0]):
        process_hit_x_y[i] = np.dot(homography_matrix, hit_x_y[i])

    for i in range(hit_x_y.shape[0]):
        process_return_x_y[i] = np.dot(homography_matrix, return_x_y[i])

    for i in range(hit_x_y.shape[0]):
        process_player_A_x_y[i] = np.dot(homography_matrix, player_A_x_y[i])

    for i in range(hit_x_y.shape[0]):
        process_player_B_x_y[i] = np.dot(homography_matrix, player_B_x_y[i])

    for i in range(hit_x_y.shape[0]):
        process_player_C_x_y[i] = np.dot(homography_matrix, player_C_x_y[i])

    for i in range(hit_x_y.shape[0]):
        process_player_D_x_y[i] = np.dot(homography_matrix, player_D_x_y[i])

    for i in range(hit_x_y.shape[0]):
        set1['hit_x'][i] = int(process_hit_x_y[i][0] / process_hit_x_y[i][2])
        set1['hit_y'][i] = int(process_hit_x_y[i][1] / process_hit_x_y[i][2])

    for i in range(hit_x_y.shape[0]):
        set1['return_x'][i] = int(process_return_x_y[i][0] / process_return_x_y[i][2])
        set1['return_y'][i] = int(process_return_x_y[i][1] / process_return_x_y[i][2])

    for i in range(hit_x_y.shape[0]):
        set1['player_A_x'][i] = int(process_player_A_x_y[i][0] / process_player_A_x_y[i][2])
        set1['player_A_y'][i] = int(process_player_A_x_y[i][1] / process_player_A_x_y[i][2])

    for i in range(hit_x_y.shape[0]):
        set1['player_B_x'][i] = int(process_player_B_x_y[i][0] / process_player_B_x_y[i][2])
        set1['player_B_y'][i] = int(process_player_B_x_y[i][1] / process_player_B_x_y[i][2])

    for i in range(hit_x_y.shape[0]):
        set1['player_C_x'][i] = int(process_player_C_x_y[i][0] / process_player_C_x_y[i][2])
        set1['player_C_y'][i] = int(process_player_C_x_y[i][1] / process_player_C_x_y[i][2])

    for i in range(hit_x_y.shape[0]):
        set1['player_D_x'][i] =int( process_player_D_x_y[i][0] / process_player_D_x_y[i][2])
        set1['player_D_y'][i] = int(process_player_D_x_y[i][1] / process_player_D_x_y[i][2])

matrix1 = np.array([
    [1.5373038371601317, 0.6655617139970934, -802.1168258877335],
    [-0.013129641182294849, 6.431804504303463, -1551.498869990092],
    [-1.1510544606305043e-05, 0.003675563093109781, 1.0]
])
matrix2 = np.array([[1.5573733896095519, 0.6789253402382057, -815.4992974842665], [-0.009690040188208928, 6.527490000670644, -1585.8966352778302], [-5.728654117601743e-06, 0.003734512710127637, 1.0]])
matrix3 =np.array([[1.5458761268559398, 0.6720814401496495, -807.4215187598494], [-0.016242136058745013, 6.476869150834237, -1561.5701964797506], [-1.1504151676562503e-05, 0.003707587791660278, 1.0]])
preprocess(matrix1,set1)
preprocess(matrix1,set2)
preprocess(matrix2,set3)
preprocess(matrix2,set4)
preprocess(matrix3,set5)
preprocess(matrix3,set6)

set1

set2

set3

set4

set5

set6

print("min(set1['player_A_x']:",min(set1['player_A_x']))
print("max(set1['player_A_x']:",max(set1['player_A_x']))
print('\n')

print("min(set1['player_B_x']:",min(set1['player_B_x']))
print("max(set1['player_B_x']:",max(set1['player_B_x']))
print('\n')

print("min(set1['player_C_x']:",min(set1['player_C_x']))
print("max(set1['player_C_x']:",max(set1['player_C_x']))
print('\n')

print("min(set1['player_D_x']:",min(set1['player_D_x']))
print("max(set1['player_D_x']:",max(set1['player_D_x']))
print('\n')

print("--------------------------------------------------")
print("min(set1['player_A_y']:",min(set1['player_A_y']))
print("max(set1['player_A_y']:",max(set1['player_A_y']))
print('\n')

print("min(set1['player_B_y']:",min(set1['player_B_y']))
print("max(set1['player_B_y']:",max(set1['player_B_y']))
print('\n')

print("min(set1['player_C_y']:",min(set1['player_C_y']))
print("max(set1['player_C_y']:",max(set1['player_C_y']))
print('\n')

print("min(set1['player_D_y']:",min(set1['player_D_y']))
print("max(set1['player_D_y']:",max(set1['player_D_y']))
print('\n')

#df = pd.DataFrame(set1)
set1.to_csv('output.csv', index=True)

print("DataFrame 已成功写入 CSV 文件 'output.csv'")

unique_ball_type_1 = set(set1["ball_type"])
unique_ball_type_2 = set(set2["ball_type"])
unique_ball_type_3 = set(set3["ball_type"])
unique_ball_type_4 = set(set4["ball_type"])
unique_ball_type_5 = set(set5["ball_type"])
unique_ball_type_6 = set(set6["ball_type"])

print("1:",unique_ball_type_1)
print("2:",unique_ball_type_2)
print("3:",unique_ball_type_3)
print("4:",unique_ball_type_4)
print("5:",unique_ball_type_5)
print("6:",unique_ball_type_6)

#'推撲球
#'挑球'
#'防守回挑'
#
#
#
#
#
#
#
#
#
#
#

#print(unique_ball_type_1-unique_ball_type_2)

print(type(set1))

for i in range(0,set1.shape[0]):
  if(set1.iloc[i]['ball_type']=='擋小球' or set1.iloc[i]['ball_type']=='放小球'):
    print(set1.iloc[i],'\n')

#df = pd.DataFrame(set1)
set1.to_csv('preprocess1.csv', index=True)
set2.to_csv('preprocess2.csv', index=True)
set3.to_csv('preprocess3.csv', index=True)
set4.to_csv('preprocess4.csv', index=True)
set5.to_csv('preprocess5.csv', index=True)
set6.to_csv('preprocess6.csv', index=True)

