# -*- coding: utf-8 -*-
"""badminton-3版本-2024-05-04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11mNvqfrakOQMVnLNbsokaGD_wq9z3hzv
"""

import pandas as pd

# 讀取六個CSV檔案
set1 = pd.read_csv('preprocess1.csv')
set2 = pd.read_csv('preprocess2.csv')
set3 = pd.read_csv('preprocess3.csv')
set4 = pd.read_csv('preprocess4.csv')
set5 = pd.read_csv('preprocess5.csv')
set6 = pd.read_csv('preprocess6.csv')

combined_data = pd.concat([set1, set2, set3, set4, set5, set6], ignore_index=True)

for i in range(0,combined_data.shape[0]):
  if(combined_data.at[i, 'ball_type']=="擋小球" or combined_data.at[i, 'ball_type']=="放小球" or combined_data.at[i, 'ball_type']=="小平球"):
    combined_data.at[i, 'ball_type'] = '網前小球'
  elif(combined_data.iloc[i]['ball_type']=="挑球" or combined_data.iloc[i]['ball_type']=="防守回挑"):
    combined_data.at[i, 'ball_type'] = '挑球'
  elif(combined_data.iloc[i]['ball_type']=="防守回抽" or combined_data.iloc[i]['ball_type']=="平球" or combined_data.iloc[i]['ball_type']=="後場抽平球"):
    combined_data.at[i, 'ball_type'] = "平球"
# 提取0、1、7、9行
#rows_to_extract = combined_data.iloc[:,[0, 1, 7, 9]]

# 提取17到24行
#rows_to_extract = rows_to_extract.append(combined_data.iloc[:,17:25])
combined_data = combined_data.iloc[:,[1, 2, 8, 10,18,19,20,21,22,23,24,25]]
# 將所提取的資訊轉換為陣列

combined_data

combined_data.iloc[0]

import numpy as np
import matplotlib.pyplot as plt
array = []
count=0
for i in range(2,combined_data.shape[0]-1):
  if(combined_data['rally'][i]!=combined_data['rally'][i+1]):
    array=np.append(array,combined_data['ball_round'][i])

array

import numpy as np
print("mean:",array.mean())
print("std:",array.std())
print("length:",len(array))
print("max:",array.max())
print("min:",array.min())
print("rally=1:", np.count_nonzero(array == 1),"筆")
print(array)

from collections import Counter

counter = Counter(array)

for element, count in counter.items():
    print(f"Element: {element}, Count: {count}")

counter = Counter(array)

plt.bar(counter.keys(), counter.values())
plt.xlabel('ball_round')
plt.ylabel('rally')
plt.title('Histogram of Data')
plt.show()

import numpy as np
keys = sorted(counter.keys())
values = [counter[key] for key in keys]

# 计算值的累积总和
total_sum = sum(values)
cumulative_percentages = [sum(values[:i+1]) / total_sum * 100 for i in range(len(values))]

# 绘制累积直方图
plt.bar(keys, cumulative_percentages, color='b')

# 添加标签
plt.xlabel('ball_round')
plt.ylabel('rally(%)')
#plt.yticks(np.arange(0, 110, 10))
plt.show()

X_data_list = []
Y_data_list = []
count=0
for i in range(0,combined_data.shape[0]-1):
  if(combined_data['rally'][i]==combined_data['rally'][i+1]-1):
    X_sample_list = []
    for j in range(count,i+1):
      X_sample_list.append(combined_data.iloc[j].values)
    X_data_list.append(X_sample_list)
    Y_data_list.append(combined_data.iloc[i].values)
    count=i+1

X_data_list[0]













# 提取0、1、7、9行
#rows_to_extract = combined_data.iloc[:,[0, 1, 7, 9]]

# 提取17到24行
#rows_to_extract = rows_to_extract.append(combined_data.iloc[:,17:25])
rows_to_extract = combined_data.iloc[:,[1, 2, 8, 10,18,19,20,21,22,23,24,25]]
# 將所提取的資訊轉換為陣列
data_array = rows_to_extract.values

rows_to_extract

rows_to_extract.index = rows_to_extract.index.to_period('r')
rows_to_extract

data=rows_to_extract

player = []
ball_type= []
for i in data["player"]:
        player.append(i)

for i in data["ball_type"]:
        ball_type.append(i)

#print(player)
#print(ball_type)

from sklearn.preprocessing import OneHotEncoder, LabelEncoder
label_encoder = LabelEncoder()

player = label_encoder.fit_transform(player)
player = player.reshape(-1, 1)  # reshape 成列向量

# 建立 OneHotEncoder 實例並對標籤進行 One-Hot Encoding
encoder = OneHotEncoder(sparse=False)
player = encoder.fit_transform(player)
#print(player)


ball_type = label_encoder.fit_transform(ball_type)
ball_type = ball_type.reshape(-1, 1)  # reshape 成列向量

ball_type = encoder.fit_transform(ball_type)
#print(ball_type)

import numpy as np
merged_arrays = []
for i in range(len(player)):
    merged_arrays.append(np.concatenate((player[i], ball_type[i])))

# 将结果转换为 NumPy 数组
merged_arrays = np.array(merged_arrays)
pd.set_option('display.max_rows', None)  # 顯示所有行
pd.set_option('display.max_columns', None)  # 顯示所有列
pd.set_option('display.width', None)  # 設置顯示寬度
#pd.set_option('display.max_colwidth', -1)  # 顯示所有內容，不要截斷
merged_arrays = pd.DataFrame(merged_arrays)
print(merged_arrays)

data = data.drop(columns=['player', 'ball_type'])

data_array = data.values

np.set_printoptions(threshold=np.inf)
DATA = np.concatenate((data_array, merged_arrays), axis=1)

print(DATA)

x = []
y = []

# 遍歷資料集
for i in range(0, len(data_array) - 10, 10):
    # 提取自變數（每10行資料）
    x.append(data_array[i:i+10, :])
    # 提取應變數（每第11行資料）
    y.append(data_array[i+10, :])

# 將列表轉換為 numpy 陣列
x = np.array(x)
y = np.array(y)

pd.set_option('display.max_rows', None)  # 顯示所有行
pd.set_option('display.max_columns', None)  # 顯示所有列
pd.set_option('display.width', None)  # 設置顯示寬度
#pd.set_option('display.max_colwidth', -1)  # 顯示所有內容，不要截斷

x

y

